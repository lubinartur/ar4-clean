name: RAG Smoke (Phase-10)

on:
  push:
    branches: [ main, master, feature/** ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rag-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-memory.txt || true
          # Для bge-m3 часто требуются эти пакеты
          pip install -U "huggingface_hub[cli]>=0.23" \
                         "sentence-transformers>=2.7" \
                         "transformers>=4.41" \
                         "safetensors>=0.4"
          # CPU-версия Torch
          pip install -U torch --index-url https://download.pytorch.org/whl/cpu

      - name: Prepare folders
        run: |
          mkdir -p models/bge-m3 storage/chroma
          chmod +x scripts/*.sh || true

      - name: Download embeddings (bge-m3)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }} # можно пустым
        run: |
          huggingface-cli download \
            --repo-type model BAAI/bge-m3 \
            --local-dir models/bge-m3 \
            --local-dir-use-symlinks False
          ls -lh models/bge-m3 | head -n 20

      - name: Start API (bg)
        env:
          # важные ENV — прокидываем напрямую в процесс
          AIR4_OFFLINE: "1"
          OLLAMA_BASE_URL: http://127.0.0.1:11434
          AIR4_MEMORY_BACKEND: chroma
          AIR4_CHROMA_COLLECTION: air4_memory
          CHROMA_DIR: ${{ github.workspace }}/storage/chroma
          AIR4_EMBED_MODEL_PATH: ${{ github.workspace }}/models/bge-m3
        run: |
          set -e
          echo "EMBED_MODEL_PATH=$AIR4_EMBED_MODEL_PATH"
          ls -lah "$AIR4_EMBED_MODEL_PATH" | head -n 50 || true
          mkdir -p "$CHROMA_DIR"

          uvicorn backend.app.main:app \
            --host 127.0.0.1 --port 8000 --log-level debug >server.log 2>&1 &
          echo $! > .uvicorn.pid

          # ждём подъём
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:8000/health && break || sleep 1
          done

          echo "---- /health ----"
          curl -sS http://127.0.0.1:8000/health || true

      - name: "Guard: ensure Chroma + embeddings are active"
        run: |
          set -e
          HEALTH=$(curl -fsS http://127.0.0.1:8000/health)
          echo "$HEALTH"
          # если бэкенд памяти — fallback, значит эмбеддер не поднялся
          echo "$HEALTH" | jq -e '.memory_backend=="chroma"' >/dev/null || {
            echo "Memory backend is not 'chroma' (likely embeddings init failed)."
            echo "---- tail server.log ----"
            tail -n 300 server.log || true
            exit 2
          }

      - name: Health check
        run: curl -fsS http://127.0.0.1:8000/health | jq .

      - name: "Sanity: one ingest call (debug)"
        run: |
          set -e
          echo "Trying single ingest…"
          curl -sS -o /tmp/ingest_resp.json -w "\nHTTP:%{http_code}\n" \
            -F "file=@tests/rag_corpus/docs/noise_finance.txt" \
            http://127.0.0.1:8000/ingest/file || true
          echo "--- ingest response (first 400 chars) ---"
          head -c 400 /tmp/ingest_resp.json || true
          echo
          echo "----------------------------------------"
          if jq . /tmp/ingest_resp.json >/dev/null 2>&1; then
            echo "OK: JSON received"
          else
            echo "ERR: not a JSON, see above"; exit 5
          fi

      - name: Run smoke
        run: bash scripts/smoke_phase10_rag.sh

      - name: Upload smoke log (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-log
          path: |
            .smoke.log
            .smoke_phase10_step2.log
            server.log
          if-no-files-found: ignore

      - name: Print server logs on failure
        if: failure()
        run: |
          echo "==== server.log (tail) ===="
          tail -n 300 server.log || true

      - name: Teardown
        if: always()
        run: |
          if [ -f .uvicorn.pid ]; then kill $(cat .uvicorn.pid) || true; fi