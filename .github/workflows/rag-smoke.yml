name: "RAG Smoke (Phase-10)"

on:
  push:
    branches: [ "main", "master", "feature/**" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  rag-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: "Install deps"
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_NO_INPUT: "1"
          PIP_DEFAULT_TIMEOUT: "100"
        run: |
          python -m pip install -U pip wheel setuptools
          # CPU torch (стабильные колёса для CI)
          pip install --extra-index-url https://download.pytorch.org/whl/cpu "torch==2.8.0"
          # Базовые зависимоти проекта
          pip install --prefer-binary -r requirements.txt
          pip install --prefer-binary -r requirements-memory.txt || true
          # Пины для Chroma/duckdb + нужные утилиты
          pip install --prefer-binary \
            "chromadb==0.5.3" \
            "duckdb==0.10.2" \
            "python-multipart>=0.0.9" \
            "FlagEmbedding>=1.2.10" \
            "huggingface_hub[cli]>=0.23"

      - name: "Download embeddings (bge-m3)"
        env:
          HF_TOKEN: "${{ secrets.HF_TOKEN }}"
        run: |
          mkdir -p models/bge-m3 storage/chroma
          huggingface-cli download \
            --repo-type model BAAI/bge-m3 \
            --local-dir models/bge-m3 \
            --local-dir-use-symlinks False
          ls -lh models/bge-m3 | head -n 20

      - name: "Preflight: load BGE-M3 locally"
        run: |
          python - <<'PY'
          from pathlib import Path
          from FlagEmbedding import BGEM3FlagModel
          p = Path("models/bge-m3")
          print("files:", len(list(p.rglob('*'))))
          _ = BGEM3FlagModel(p.as_posix(), use_fp16=False, device="cpu")
          print("✓ BGE-M3 loaded OK")
          PY

      - name: "Write CI .env (absolute paths)"
        run: |
          # Абсолютные пути — надёжнее для всех импортов и фоновых процессов
          cat > .env <<'ENV'
          echo "ENABLE_MEMORY=true"                                   > .env
          echo "AIR4_ENABLE_MEMORY=true"                             >> .env
          AIR4_EMBED_MODEL_PATH=./models/bge-m3
          echo "AIR4_MEMORY_BACKEND=chroma"                          >> .env
          echo "AIR4_CHROMA_COLLECTION=air4_memory"                  >> .env
          echo "CHROMA_DIR=${GITHUB_WORKSPACE}/storage/chroma"       >> .env
          CHROMA_DIR=./storage/chroma
          echo "AIR4_OFFLINE=0"                                      >> .env
          echo "---- .env ----"
          sed -n '1,200p' .env

      - name: "Start API (bg)"
        run: |
          set -e
          mkdir -p ./storage/chroma ./models/bge-m3
          uvicorn backend.app.main:app \
            --host 127.0.0.1 \
            --port 8000 \
            --log-level debug \
            --env-file .env \
            > server.log 2>&1 &
          echo $! > .uvicorn.pid
          # ждём старт /health
          for i in {1..40}; do
            curl -fsS http://127.0.0.1:8000/health && break || sleep 1
          done
          echo "---- /health after boot ----"
          curl -sS http://127.0.0.1:8000/health || true

      - name: "Health check"
        run: curl -fsS http://127.0.0.1:8000/health

      - name: "Guard: ensure Chroma + embeddings are active"
        run: |
          set -e
          echo "---- quick env check ----"
          python -V
          python - <<'PY'
          try:
              import chromadb, duckdb
              print("✓ chromadb", chromadb.__version__)
              print("✓ duckdb", duckdb.__version__)
          except Exception as e:
              print("❌ Import error:", e)
              raise
          PY
          out="$(curl -fsS http://127.0.0.1:8000/health)"
          echo "$out" | jq . || echo "$out"
          if echo "$out" | grep -q '"memory_backend":"chroma"'; then
            echo "✓ Chroma backend active"
          else
            echo "❌ Memory backend is NOT 'chroma' (embeddings init failed?)"
            echo "---- tail server.log ----"
            tail -n 200 server.log || true
            exit 2
          fi

      - name: "Sanity: one ingest call (debug)"
        run: |
          set -e
          echo "Trying single ingest…"
          curl -sS -o /tmp/ingest_resp.json -w "\nHTTP:%{http_code}\n" \
            -F "file=@tests/rag_corpus/docs/noise_finance.txt" \
            http://127.0.0.1:8000/ingest/file || true
          echo "--- ingest response (first 400 chars) ---"
          head -c 400 /tmp/ingest_resp.json || true
          echo
          if jq . /tmp/ingest_resp.json >/dev/null 2>&1; then
            echo "OK: JSON received"
          else
            echo "ERR: not a JSON, see above"; exit 5
          fi

      - name: "Run smoke"
        shell: bash
        run: |
          # Чуть мягче порог в CI (локально используем 0.60)
          export K=6
          export MMR=0.4
          export HYDE=2
          export THRESHOLD=0.30
          echo "CI params: K=$K MMR=$MMR HYDE=$HYDE THRESHOLD=$THRESHOLD"
          bash scripts/smoke_phase10_rag.sh

      - name: "Upload smoke log (artifact)"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "smoke-log"
          path: |
            .smoke.log
            .smoke_phase10_step2.log
            server.log
          if-no-files-found: ignore

      - name: "Teardown"
        if: always()
        run: |
          if [ -f .uvicorn.pid ]; then kill $(cat .uvicorn.pid) || true; fi