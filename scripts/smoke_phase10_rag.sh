#!/usr/bin/env bash
set -euo pipefail

# ---------- Params (overridable via env) ----------
BASE="${BASE:-http://127.0.0.1:8000}"
XUSER="${XUSER:-X-User: dev}"
PASSWORD="${PASSWORD:-}"
K="${K:-6}"
MMR="${MMR:-0.4}"
HYDE="${HYDE:-2}"
RECENCY_DAYS="${RECENCY_DAYS:-365}"
THRESHOLD="${THRESHOLD:-0.30}"   # –¥–ª—è CI –æ—Å—Ç–∞–≤–ª—è–µ–º 0.30; –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å
FILTERS="${FILTERS:-tag:phase10 OR source:rag_corpus}"
CORPUS_DIR="${CORPUS_DIR:-tests/rag_corpus}"
DOCS_DIR="${DOCS_DIR:-$CORPUS_DIR/docs}"
QUERIES="${QUERIES:-$CORPUS_DIR/queries.tsv}"
# ---------------------------------------------------

for tool in curl jq awk sed; do
  command -v "$tool" >/dev/null 2>&1 || { echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è $tool"; exit 2; }
done

TOKEN=""
if [[ -n "$PASSWORD" ]]; then
  TOKEN="$(curl -s -X POST "$BASE/auth/login" -H 'Content-Type: application/json' -d "{\"password\":\"$PASSWORD\"}" | jq -r '.token // empty')"
  [[ -n "$TOKEN" ]] && echo "üîê Auth token –ø–æ–ª—É—á–µ–Ω." || echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
fi
HEADERS=(-H "$XUSER"); [[ -n "$TOKEN" ]] && HEADERS+=(-H "Authorization: Bearer $TOKEN")

echo "== Smoke Phase-10 RAG =="
echo "BASE=$BASE, K=$K, MMR=$MMR, HYDE=$HYDE, THRESHOLD=$THRESHOLD, FILTERS='${FILTERS}'"

[[ -d "$DOCS_DIR" ]] || { echo "‚ùå –ù–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $DOCS_DIR"; exit 2; }
echo "‚Üí –ò–Ω–∂–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ $DOCS_DIR"
shopt -s nullglob
for f in "$DOCS_DIR"/*.txt; do
  echo "  + $(basename "$f")"
  resp="$(curl -s -X POST "$BASE/ingest/file" -F "file=@$f" "${HEADERS[@]}")" \
    || { echo "‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∂–µ—Å—Ç–∞: $f"; exit 1; }
  ok="$(echo "$resp" | jq -r '.ok // false' 2>/dev/null || echo false)"
  chunks="$(echo "$resp" | jq -r '.chunks // 0' 2>/dev/null || echo 0)"
  if [[ "$ok" != "true" || "$chunks" == "0" ]]; then
    # fallback: /memory/add
    content="$(cat "$f")"
    payload="$(jq -n --arg txt "$content" --arg src "$(basename "$f")" '{text:$txt, meta:{source:"rag_corpus", file:$src, tag:"phase10"}}')"
    resp2="$(curl -s -X POST "$BASE/memory/add" -H 'Content-Type: application/json' -d "$payload" "${HEADERS[@]}")" \
      || { echo "‚ùå –û—à–∏–±–∫–∞ /memory/add –¥–ª—è $f"; exit 1; }
    ok2="$(echo "$resp2" | jq -r '.ok // false' 2>/dev/null || echo false)"
    [[ "$ok2" == "true" ]] && echo "    ‚Ü≥ fallback /memory/add ‚úì" || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /memory/add"; exit 1; }
  fi
done
shopt -u nullglob

[[ -f "$QUERIES" ]] || { echo "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ $QUERIES"; exit 2; }

total_q=0
sum_prec=0
echo "‚Üí –ó–∞–ø—Ä–æ—Å—ã –∏ p@K:"

shopt -s nocasematch
while IFS=$'\t' read -r query expected || [[ -n "${query:-}" ]]; do
  [[ -z "${query// }" ]] && continue
  [[ "${query:0:1}" == "#" ]] && continue
  total_q=$((total_q+1))

  # intent boost: –¥–æ–±–∞–≤–∏–º —è–∫–æ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
  boost=""
  qlc="$query"

  # intro / about
  case "$qlc" in
    *"–æ —á—ë–º"*|*"–æ —á–µ–º"*|*about*|*–æ–ø–∏—Å–∞–Ω*)
      boost="$boost phase10_intro –æ–ø–∏—Å–∞–Ω–∏–µ intro"
      ;;
  esac

  # goals / —Ü–µ–ª–∏
  case "$qlc" in
    *—Ü–µ–ª–∏*|*goal*|*goals*)
      boost="$boost phase10_goals —Ü–µ–ª–∏ goals"
      ;;
  esac

  # next steps / —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
  case "$qlc" in
    *—Å–ª–µ–¥—É—é—â*|*"next steps"*|*roadmap*|*–ø–ª–∞–Ω–∏—Ä–æ–≤–∞*)
      boost="$boost phase10_next \"—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\" \"next steps\" roadmap"
      ;;
  esac

  # done / —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ ‚Äî —É—Å–∏–ª–∏–≤–∞–µ–º!
  case "$qlc" in
    *—Å–¥–µ–ª–∞–Ω–æ*|*–≥–æ—Ç–æ–≤–æ*|*–∏—Ç–æ–≥*|*–∑–∞–≤–µ—Ä—à–µ–Ω*|*–≤—ã–ø–æ–ª–Ω–µ–Ω*|*–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å*|*done*|*completed*|*finished*|*"status done"* )
      boost="$boost phase10_done done \"—á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Ç–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ completed finished"
      ;;
  esac

  # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
  hyde_local="$HYDE"
  filters_extra=""
  # –ï—Å–ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ–∂–∏–¥–∞–µ—Ç phase10_done ‚Äî –µ—â—ë —É—Å–∏–ª–∏–≤–∞–µ–º HYDE –∏ —Ñ–∏–ª—å—Ç—Ä—ã
  if [[ "$expected" == *"phase10_done"* ]] || [[ "$qlc" =~ (—Å–¥–µ–ª–∞–Ω–æ|–≥–æ—Ç–æ–≤–æ|–∏—Ç–æ–≥|–∑–∞–≤–µ—Ä—à–µ–Ω|done|completed|finished) ]]; then
    # –ü–æ–¥–Ω–∏–º–∞–µ–º HYDE —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å (+1 –º–∏–Ω–∏–º—É–º, —á—Ç–æ–±—ã –Ω–µ –Ω–æ–ª—å)
    if [[ "${hyde_local:-0}" -lt 2 ]]; then hyde_local=2; else hyde_local=$((hyde_local+1)); fi
    # –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫–∏–π —Ä–∞—Å—à–∏—Ä—è—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä (–æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Å —Ç–µ–∫—É—â–µ–π API-–ª–æ–≥–∏–∫–æ–π)
    filters_extra=' OR tag:status OR tag:done'
  fi

  qsend="$query $boost"
  filters_send="$FILTERS$filters_extra"

  qsend="$query $boost"

  resp="$(curl -sG "$BASE/memory/debug/query_raw" \
    --data-urlencode "q=$qsend" \
    --data-urlencode "k=$K" \
    --data-urlencode "mmr=$MMR" \
    --data-urlencode "hyde=$hyde_local" \
    --data-urlencode "recency_days=$RECENCY_DAYS" \
    --data-urlencode "filters=$filters_send" \
    "${HEADERS[@]}")"

  # —Å—á–∏—Ç–∞–µ–º hits —Å—Ä–µ–¥–∏ top-K
  hits=0
  IFS='|' read -r -a expected_arr <<< "$expected"
  while IFS=$'\t' read -r mfn msp mtitle thead || [[ -n "${mfn:-}${msp:-}${mtitle:-}${thead:-}" ]]; do
    docid=""
    [[ -n "$mtitle" ]] && docid="$(printf "%s" "$mtitle" | sed -n 's/.*DOCID:[[:space:]]*\([A-Za-z0-9._-]\+\).*/\1/p' | head -n1 || true)"
    [[ -z "$docid" && -n "$thead"  ]] && docid="$(printf "%s" "$thead"  | sed -n 's/.*DOCID:[[:space:]]*\([A-Za-z0-9._-]\+\).*/\1/p' | head -n1 || true)"
    if [[ -z "$docid" ]]; then
      for cand in "$mfn" "$msp"; do
        [[ -z "$cand" ]] && continue
        basef="$(basename "$cand")"; basef="${basef%.*}"
        [[ -n "$basef" ]] && { docid="$basef"; break; }
      done
    fi
    if [[ -n "$docid" ]]; then
      for e in "${expected_arr[@]}"; do
        if [[ "$docid" == "$e" ]]; then hits=$((hits+1)); break; fi
      done
    fi
  done < <(printf "%s" "$resp" | jq -r '.rows[0:'"$K"'][] | [ (.metadata.filename // ""), (.metadata.source_path // ""), (.metadata.title // ""), (.text_head // "") ] | @tsv')

  prec=$(awk -v h="$hits" -v k="$K" 'BEGIN { printf("%.3f", (k>0)? h/k : 0) }')
  sum_prec=$(awk -v s="$sum_prec" -v p="$prec" 'BEGIN { printf("%.6f", s + p) }')
  echo "Q${total_q}: \"$query\" -> hits=$hits/${K}, p@${K}=$prec (–æ–∂–∏–¥.: $expected)"
done < "$QUERIES"
shopt -u nocasematch

[[ "$total_q" -gt 0 ]] || { echo "‚ùå –í $QUERIES –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫."; exit 2; }
avg_p=$(awk -v s="$sum_prec" -v n="$total_q" 'BEGIN { printf("%.3f", (n>0)? s/n : 0) }')
echo "== –ò—Ç–æ–≥–æ: avg p@${K} = $avg_p –Ω–∞ $total_q –∑–∞–ø—Ä–æ—Å–∞—Ö =="

awk -v a="$avg_p" -v t="$THRESHOLD" 'BEGIN {
  if (a+0 >= t+0) { print "‚úÖ –ü–æ—Ä–æ–≥ –ø—Ä–æ–π–¥–µ–Ω."; exit 0 }
  else            { print "‚ö†Ô∏è  –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞.";  exit 1 }
}'